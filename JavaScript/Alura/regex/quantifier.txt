? = zero ou uma vez
* = zero ou mais vezes
+ = uma ou mais vezes
{n} = exatamente n vezes`
{n,} = no mínimo n vezes
{n, m} = no mínimo n+1 vezes, no máximo m vezes

. = qlqr elemento

\s significa whitespace e é um atalho para [ \t\r\n\f]

\w significa word char e é uma atalho para [A-Za-z0-9_]

/d todos os dígitos [0-9]


âncoras:

/b = palavra exata word boundary ex: \bteste\b  ... so nao podendo ter um word char antes ou depois

^ = no inicio tem que ter... ex: ^teste

$ = tem que ter no final.... ex: teste$

Declaramos um grupo com ().
Através do ?:, dizemos que não queremos ver esse grupo na resposta

| => pipe pode ter um OU outro ex: ([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)
super.mario@caelum.com.br extrai super.mario


---- validar email ----

^([\w-]\.?)+@([\w-]+\.)+([A-Za-z]{2,4})+$

Vamos por partes na explicação:

    a regex usa âncoras no início ^ e fim $ para garantir o match inteiro;
    antes do @, temos: ^([\w-]\.?)+
        definimos uma classe com word-chars e hífen, seguido por um ponto opcional: [\w-]\.?
        essa classe pode se repetir uma ou mais vezes, então criamos um grupo e + ao final: ([\w-]\.?)+
    depois do @, temos:
        ([\w-]+\.)+, que é bastante parecido com o anterior ao @, porém com o . obrigatório,
        ([A-Za-z]{2,4})+$, que é o final da nossa regex, seleciona o domínio do email, como br, com, us. O mínimo de letras dessa parte final devem ser 2 e no máximo 4.
